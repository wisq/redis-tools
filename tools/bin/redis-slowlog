#!/usr/bin/ruby

$LOAD_PATH << File.dirname(File.realpath(__FILE__)) + "/../lib"
require 'redis_tool'

require 'statsd'

class SlowLogger < RedisTool
  class Entry < Struct.new(:id, :timestamp, :duration, :command_name, :arguments, :command, :command_raw)

    def initialize(id, timestamp, duration, command)
      super(id, timestamp, duration)

      self.command_name = command.first
      self.command      = command.join(' ')
      self.command_raw  = command

      if command.last.scrub =~ /\A\.\.\. \((\d+) more arguments\)\z/
        self.arguments = command.count + $1.to_i - 2 # minus command (first) and "more arguments" (last)
      else
        self.arguments = command.count - 1 # minus command (first)
      end
    end

    def log_params
      to_h
    end

    unless instance_methods.include?(:to_h) # Ruby 2+
      def to_h
        Hash[each_pair.to_a]
      end
    end
  end

  def initialize(*args)
    super(*args)
    @max_seen_id = -1

    @statsd = Statsd.new
    @statsd.tags = ["port:#{@redis.client.port}"]
    if instance = ENV['REDIS_INSTANCE']
      @statsd.tags << "instance:#{instance}"
    end
  end

  protected

  def run_wrapped
    unseen_slowlog_entries(1) # discard prior entries

    loop do
      output_slowlog(unseen_slowlog_entries)
      sleep(5)
    end
  end

  private

  def output_slowlog(entries)
    entries.each do |entry|
      log("slowlog", entry.log_params)

      opts = {:tags => ["command:#{entry.command_name}"]}
      @statsd.increment('redis.slowlog.count', opts)
      @statsd.histogram('redis.slowlog.duration',  entry.duration,  opts)
      @statsd.histogram('redis.slowlog.arguments', entry.arguments, opts)
    end
  end

  def unseen_slowlog_entries(count = 1000)
    unseen  = @redis.slowlog('get', count).take_while { |id, *_| id > @max_seen_id }
    entries = unseen.reverse.map { |data| Entry.new(*data) }
    @max_seen_id = entries.last.id unless entries.empty?
    entries
  end
end

SlowLogger.from_argv(*ARGV).run
